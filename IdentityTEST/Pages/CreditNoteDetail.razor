@page "/CreditNoteDetails/{CreditNoteID}"
@using Model
@using Interfaces

@inject ICreditNoteDetailsService CreditNoteDetailsService
@inject IBudgetDetailsService BudgetDetailsService
@inject ICreditNoteService CreditNoteService



@inject NavigationManager NavigationManager

@attribute [Authorize]

@using Syncfusion.Blazor
@using Syncfusion.Blazor.Data
@using Syncfusion.Blazor.Grids
@using System.Collections.ObjectModel
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Inputs;
@using Syncfusion.Blazor.Calendars;
@using Syncfusion.Blazor.Popups;
@using Syncfusion.Blazor.Notifications
@using Syncfusion.Blazor.Buttons

@inject AuthenticationStateProvider AuthenticationStateProvider


<div class="container-fluid">
    <p>@Message</p>
    <span class="error">@ErrorDetails</span>

    <div class="col-lg-12" style="padding:1px; height:50px">
        <div class="content-wrapper">
            <div class="alert alert-title" role="banner"><b>Detalle de nota de crédito: @CreditNoteNumber </b></div>
        </div>
    </div>


    <div class="col-lg-12 control-section">
        <div class="content-wrapper">
            <div class="row">
                @if (GridData == null)
                {
                    <div class="alert alert-warning" role="alert"><p><em>Cargando datos...</em></p></div>
                }
                else
                {
                    <SfGrid ID="Grid" @ref="Grid" AllowPaging="true" AllowSorting="true" Toolbar="@ToolbarItems" DataSource="@GridData" Locale="es-ES" ShowColumnChooser="true" AllowFiltering="true" AllowExcelExport="true">

                        <GridEvents OnActionBegin="OnBeginHandler" OnActionComplete="OnCompleteHandler" TValue="CreditNoteDetails" OnToolbarClick="ToolbarClickHandler"></GridEvents>
                        <GridPageSettings PageSize="20"></GridPageSettings>
                        <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"></GridFilterSettings>
                        <GridEditSettings AllowAdding="CanEdit" AllowEditing="true" AllowDeleting="CanEdit" Mode="EditMode.Dialog" Dialog="DialogParams">
                            <HeaderTemplate>
                                @{
                                    var det = (context as CreditNoteDetails);
                                }
                                <span>Detalle de nota: @(det.nro_nota) </span>
                                <span class="badge-info"> @(det.id_nota_credito)</span>
                            </HeaderTemplate>
                            <Template>
                                @{
                                    var det = (context as CreditNoteDetails);
                                }
                                <div>
                                    <div class="form-row">
                                        <div class="form-group col-md-3">
                                            <SfNumericTextBox @bind-Value="@(det.id_nota_credito_detalle)" Enabled="false" Placeholder="ID" FloatLabelType="FloatLabelType.Always"></SfNumericTextBox>
                                        </div>
                                        <div class="form-group col-md-6">
                                            <SfDropDownList TItem="Impuesto"
                                                        TValue="String"
                                                        @bind-Value="@(det.impuesto)"
                                                        DataSource="@LocalImpuesto"
                                                        Placeholder="Impuesto"
                                                        FloatLabelType="FloatLabelType.Always">
                                                <DropDownListFieldSettings Value="ID" Text="Text"></DropDownListFieldSettings>
                                            </SfDropDownList>
                                        </div>
                                    </div>

                                    <div class="form-row">
                                        <div class="form-group col-md-12">
                                            <SfTextBox @bind-Value="@(det.concepto)" Enabled="CanEdit" Placeholder="Concepto" FloatLabelType="FloatLabelType.Always"></SfTextBox>
                                        </div>
                                    </div>
                                    <div class="form-row">
                                        <div class="form-group col-md-4">
                                            <SfNumericTextBox @bind-Value="@(det.monto)" Enabled="CanEdit" Placeholder="Monto" FloatLabelType="FloatLabelType.Always"></SfNumericTextBox>
                                        </div>
                                        <div class="form-group col-md-4">
                                            <SfNumericTextBox @bind-Value="@(det.porcentaje_impuesto)" Enabled="false" Placeholder="% Impuesto" FloatLabelType="FloatLabelType.Always" ></SfNumericTextBox>
                                        </div>
                                    </div>

                                </div>
                            </Template>

                        </GridEditSettings>
                        <GridColumns>
                            <GridColumn Field=@nameof(CreditNoteDetails.id_nota_credito_detalle) HeaderText="ID" TextAlign="TextAlign.Center" Width="15" IsPrimaryKey="true"></GridColumn>
                            <GridColumn Field=@nameof(CreditNoteDetails.concepto) HeaderText="Concepto" Width="50"></GridColumn>
                            <GridColumn Field=@nameof(CreditNoteDetails.monto) HeaderText="Monto" Width="25" Format="N0"></GridColumn>
                            <GridColumn Field=@nameof(CreditNoteDetails.impuesto) HeaderText="Monto" Visible="true" Width="20"></GridColumn>
                            <GridColumn Field=@nameof(CreditNoteDetails.porcentaje_impuesto) HeaderText="% imp." Visible="true" Width="20" Format="N2"></GridColumn>
                            <GridColumn Field=@nameof(CreditNoteDetails.monto_impuesto) HeaderText="Monto imp." Visible="true" Width="20" Format="N2"></GridColumn>
                        </GridColumns>

                    </SfGrid>
                }

            </div>
            <SfDialog Target="#target"
                      Width="300px"
                      Height="130px"
                      IsModal="true"
                      ShowCloseIcon="false"
                      @bind-Visible="DeleteRecordConfirmVisibility">
                <DialogTemplates>
                    <Header> Eliminar el registro? </Header>
                    <Content>
                        <div class="button-container">
                            <button type="submit"
                                    class="e-btn e-normal e-primary"
                                    @onclick="ConfirmDeleteYes">
                                Yes
                            </button>
                            <button type="submit"
                                    class="e-btn e-normal"
                                    @onclick="ConfirmDeleteNo">
                                No
                            </button>
                        </div>
                    </Content>
                </DialogTemplates>
            </SfDialog>
            <SfToast @ref="ToastObj" Title="@ToastTitle" Content="@ToastContent" CssClass="@ToastCssClass">
                <ToastPosition X="Right" Y="Bottom"></ToastPosition>
            </SfToast>


        </div>

    </div>

</div>

<style>
    #toast_default .e-meeting::before {
        content: "\e705";
        font-size: 17px;
    }
</style>

@code {


    [Parameter]
    public string CreditNoteID { get; set; }

    public DateTime hoy = DateTime.Today;
    public DateTime t;

    public string Message { get; set; }
    public string[] ToolbarItems = new string[] { "Add", "Edit", "Delete", "Update", "Cancel", "ExcelExport", "Search", "ColumnChooser" };
    public string ErrorDetails = "";

    public bool CanEdit { get; set; } = true;

    public IEnumerable<CreditNoteDetails> GridData { get; set; }
    public IEnumerable<Employee> employees { get; set; }


    public CreditNote creditNote;

    public class Impuesto
    {
        public string ID { get; set; }
        public string Text { get; set; }
        public decimal Value { get; set; }
    }

    List<Impuesto> LocalImpuesto = new List<Impuesto> {
    new Impuesto() { ID= "IVA 10%", Text= "IVA 10%", Value=10 },
    new Impuesto() { ID= "IVA 5%", Text= "IVA 5%", Value=5 },
    new Impuesto() { ID= "EXENTO", Text= "EXENTO", Value=0 },
  };

    public bool EditDialogVisibility { get; set; } = false;
    public bool DeleteRecordConfirmVisibility { get; set; } = false;

    public Int32 ID = 0;

    public string UserName;

    public string CreditNoteNumber;

    SfToast ToastObj;

    private int ToastFlag = 0;
    private string ToastTitle = "";
    private string ToastContent = "";
    private string ToastCssClass = "";


    private class ToastOption
    {
        public string Title { get; set; }
        public string Content { get; set; }
        public string CssClass { get; set; }
    }

    private ToastOption[] Toasts = new ToastOption[] {
        new ToastOption { Title = "Warning !", Content = "El registro se eliminó con éxito.", CssClass = "e-toast-warning" },
        new ToastOption { Title = "Success !", Content = "El registro se modificó con éxito.", CssClass = "e-toast-success" },
        new ToastOption { Title = "Error !", Content = "A problem has been occurred while submitting your data.", CssClass = "e-toast-danger" },
        new ToastOption { Title = "Information !", Content = "Please read the comments carefully.", CssClass = "e-toast-info" }
    };


    private DialogSettings DialogParams = new DialogSettings { Width = "850px", EnableResize = true, AllowDragging = true };

    SfGrid<CreditNoteDetails> Grid { get; set; }





    protected override async Task OnInitializedAsync()
    {
        try
        {
            int id = Int32.Parse(CreditNoteID);

            GridData = await CreditNoteDetailsService.GetAllCreditNoteDetail(id);
            creditNote = await CreditNoteService.GetCreditNoteDetails(id);

            await UpdateLittleBoxStatus();

            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            string[] subs = user.Identity.Name.Split("@");
            UserName = subs[0];
        }
        catch (Exception ex)
        {
            Message = "Error al obtener detalle de la caja: " + ex.Message;
        }
    }

    protected async Task UpdateLittleBoxStatus()
    {
        try
        {
            CreditNoteNumber = "Nota de crédito: " + creditNote.nro_nota;
        }
        catch (Exception ex)
        {
            Message = ex.Message;
        }
    }

    public async Task ToolbarClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (args.Item.Id == "Grid_excelexport") //Id is combination of Grid's ID and itemname
        {
            ExcelExportProperties ExcelProperties = new ExcelExportProperties();
            ExcelProperties.FileName = CreditNoteNumber + ".xlsx";
            await this.Grid.ExcelExport(ExcelProperties);
        }
    }


    private async Task OnBeginHandler(ActionEventArgs<CreditNoteDetails> Args)
    {
        if (Args.RequestType == Syncfusion.Blazor.Grids.Action.Save)
        {
            await SaveCreditNoteDetails((CreditNoteDetails)Args.Data);

        }
        else if (Args.RequestType == Syncfusion.Blazor.Grids.Action.Delete)
        {
            ID = ((CreditNoteDetails)Args.Data).id_nota_credito_detalle;

            // Open Delete confirmation dialog
            this.DeleteRecordConfirmVisibility = true;
            StateHasChanged();
        }


        return;
    }

    private async Task OnCompleteHandler(ActionEventArgs<CreditNoteDetails> Args)
    {
        if (Args.RequestType == Syncfusion.Blazor.Grids.Action.Save)
        {
            await ShowToast(1);
            GridData = await CreditNoteDetailsService.GetAllCreditNoteDetail(Int32.Parse(CreditNoteID));
            Grid.Refresh();

        }
        else if (Args.RequestType == Syncfusion.Blazor.Grids.Action.Delete)
        {

            StateHasChanged();
        }

        await UpdateLittleBoxStatus();

        return;
    }

    protected async Task SaveCreditNoteDetails(CreditNoteDetails creditNoteDetail)
    {
        creditNoteDetail.id_nota_credito = Int32.Parse(CreditNoteID);
        Impuesto imp = LocalImpuesto.Where( i => i.ID.Equals(creditNoteDetail.impuesto)).First();

        creditNoteDetail.porcentaje_impuesto = imp.Value;
        creditNoteDetail.monto_impuesto = creditNoteDetail.monto * (creditNoteDetail.porcentaje_impuesto / 100);


        await CreditNoteDetailsService.SaveCreditNoteDetail(creditNoteDetail);
        Grid.Refresh();

    }

    protected async Task DeleteCreditNoteDetails(int id)
    {
        await CreditNoteDetailsService.DeleteCreditNoteDetail(id);
        await ShowToast(0);
        Grid.Refresh();

    }



    public async void ConfirmDeleteYes()
    {
        // The user selected Yes to delete the
        // seleted Help Desk Ticket
        // Delete the record
        await DeleteCreditNoteDetails(ID);

        // Close the dialog
        this.DeleteRecordConfirmVisibility = false;

        // Refresh the SfGrid
        // so the deleted record will not show
        Grid.Refresh();
    }

    public void ConfirmDeleteNo()
    {
        // Open the dialog
        // to give the user a chance
        // to confim they want to delete the record
        this.DeleteRecordConfirmVisibility = false;
    }

    public Int32 GetEmployeeID(string username)
    {
        int id;
        try
        {
            id = employees.First(c => c.usuario == username).id_funcionario;
            return id;
        }
        catch (Exception ex)
        {
            Message = "Error al obtener ID de usuario : " + ex.Message;
            return 1;
        }
    }

    private async Task ShowToast(int ix)
    {
        this.ToastTitle = this.Toasts[ix].Title;
        this.ToastContent = this.Toasts[ix].Content;
        this.ToastCssClass = this.Toasts[ix].CssClass;
        await Task.Delay(200);

        await this.ToastObj.Show();

    }



    private async Task HideToast()
    {

        await this.ToastObj.Hide("All");
    }
}


