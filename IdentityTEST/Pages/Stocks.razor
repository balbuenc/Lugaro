@page "/Stock"
@using Model
@using Interfaces
@inject IStockService StockService
@inject IStoreService StoreService
@inject IProductService ProductService


@attribute [Authorize]
@using Syncfusion.Blazor
@using Syncfusion.Blazor.Data
@using Syncfusion.Blazor.Grids
@using System.Collections.ObjectModel
@inject NavigationManager NavigationManager
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Inputs;
@using Syncfusion.Blazor.Calendars;




<div class="container-fluid">
    <p>@Message</p>
    <span class="error">@ErrorDetails</span>

    <div class="col-lg-12" style="padding:1px; height:50px">
        <div class="content-wrapper">
            <div class="alert alert-primary" role="banner"><b>Stock de productos</b></div>
        </div>
    </div>
    <div class="col-lg-12 control-section">
        <div class="content-wrapper">
            <div class="row">
                @if (GridData == null)
                {
                    <div class="alert alert-warning" role="alert"><p><em>Cargando datos...</em></p></div>
                }
                else
                {
                    <SfGrid ID="Grid" @ref="Grid" AllowPaging="true" AllowSorting="true" Toolbar="@ToolbarItems" DataSource="@GridData" Locale="es-ES" AllowExcelExport="true" ShowColumnChooser="true" AllowTextWrap="true" AllowFiltering="true">

                        <GridEvents OnActionBegin="OnBeginHandler" OnActionComplete="ActionCompletedHandler" TValue="Stock" OnToolbarClick="ToolbarClickHandler"></GridEvents>
                        <GridPageSettings PageSize="20"></GridPageSettings>
                        <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"></GridFilterSettings>
                        <GridEditSettings AllowAdding="true" AllowEditing="true" AllowDeleting="true" Mode="EditMode.Dialog" Dialog="DialogParams">
                            <HeaderTemplate>
                                @{
                                    var stoc = (context as Stock);
                                }
                                <span>Detalle del Stock: @(stoc.codigo)</span>
                            </HeaderTemplate>
                            <Template>
                                @{
                                    var stoc = (context as Stock);
                                }
                                <div>
                                    <div class="form-row">
                                        <div class="form-group col-md-3">

                                            <SfNumericTextBox @bind-Value="@(stoc.id_stock)" Enabled="false" Placeholder="ID" FloatLabelType="FloatLabelType.Always"></SfNumericTextBox>
                                        </div>
                                        <div class="form-group col-md-3">
                                            <SfDropDownList DataSource="@products"
                                                        TItem="Product"
                                                        TValue="Int32"
                                                        Enabled="false"
                                                        @bind-Value="@(stoc.id_producto)"
                                                        Placeholder="Producto"
                                                        FloatLabelType="FloatLabelType.Always" AllowFiltering="true" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains">
                                                <DropDownListFieldSettings Value="id_producto" Text="codigo"></DropDownListFieldSettings>
                                            </SfDropDownList>
                                        </div>
                                        <div class="form-group col-md-9">
                                            <SfTextBox @bind-Value="@(stoc.producto)" Enabled="false" Placeholder="Producto" FloatLabelType="FloatLabelType.Always"> </SfTextBox>
                                        </div>
                                    </div>
                                    <div class="form-row">
                                        <div class="form-group col-md-3">

                                            <SfDropDownList DataSource="@stores"
                                                        TItem="Store"
                                                        TValue="Int32"
                                                        @bind-Value="@(stoc.id_deposito)"
                                                        Enabled="false"
                                                        Placeholder="Depósito"
                                                        FloatLabelType="FloatLabelType.Always" AllowFiltering="true" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains">
                                                <DropDownListFieldSettings Value="id_deposito" Text="deposito"></DropDownListFieldSettings>
                                            </SfDropDownList>
                                        </div>
                                        <div class="form-group col-md-6">
                                            <SfNumericTextBox @bind-Value="@(stoc.cantidad)" Enabled="false" Placeholder="Cantidad" FloatLabelType="FloatLabelType.Always"> </SfNumericTextBox>
                                        </div>
                                    </div>



                                </div>
                            </Template>
                        </GridEditSettings>
                        <GridColumns>
                            <GridColumn Field=@nameof(Stock.id_stock) HeaderText="ID" TextAlign="TextAlign.Center" Width="5" IsPrimaryKey="true"></GridColumn>

                            <GridColumn Field=@nameof(Stock.codigo) HeaderText="Código" Width="20"></GridColumn>
                            <GridColumn Field=@nameof(Stock.producto) HeaderText="Producto" Width="50"></GridColumn>
                            <GridColumn Field=@nameof(Stock.deposito) HeaderText="Depósito" Width="30"></GridColumn>
                            <GridColumn Field=@nameof(Stock.cantidad) HeaderText="Cantidad" Width="20"></GridColumn>





                        </GridColumns>
                    </SfGrid>
                    <style>
                        h6,
                        .h6 {
                            font-size: 140%;
                            color: white;
                        }

                        .e-grid th.e-headercell {
                            background-color: lightgray;
                        }



                        .e-grid tr.e-row.e-row {
                            background-color: whitesmoke;
                        }

                        .e-headercell {
                            font-family: "Segoe UI";
                            font-weight: bold;
                            color: black
                        }
                    </style>
                }

            </div>
        </div>

    </div>

</div>


@code {
    //public IEnumerable<Stock> clients { get; set; }
    public string Message { get; set; }
    public string[] ToolbarItems = new string[] { "Add", "Edit", "Delete", "Update", "Cancel", "ExcelExport", "Search", "ColumnChooser" };
    public string ErrorDetails = "";

    public IEnumerable<Stock> GridData { get; set; }
    public IEnumerable<Store> stores { get; set; }
    public IEnumerable<Product> products { get; set; }


    SfGrid<Stock> Grid { get; set; }

    private DialogSettings DialogParams = new DialogSettings { Width = "850px", EnableResize = true, AllowDragging = true };


    protected override async Task OnInitializedAsync()
    {
        try
        {
            GridData = await StockService.GetAllStocks();
            stores = await StoreService.GetAllStores();
            products = await ProductService.GetProductsDefinitions();

        }
        catch (Exception ex)
        {
            Message = "Error al obtener Stock: " + ex.Message;
        }
    }



    private async Task OnBeginHandler(ActionEventArgs<Stock> Args)
    {
        if (Args.RequestType == Syncfusion.Blazor.Grids.Action.Save)
        {
            await SaveStock((Stock)Args.Data);
        }
        else if (Args.RequestType == Syncfusion.Blazor.Grids.Action.Delete)
        {
            await DeleteStock(((Stock)Args.Data).id_stock);
        }

        return;
    }

    private async Task ActionCompletedHandler(ActionEventArgs<Stock> Args)
    {
        if (Args.RequestType == Syncfusion.Blazor.Grids.Action.Save || Args.RequestType == Syncfusion.Blazor.Grids.Action.Delete)
        {
            GridData = await StockService.GetAllStocks();
            Grid.Refresh();
        }

    }

    protected async Task SaveStock(Stock stock)
    {
        await StockService.SaveStock(stock);
        Grid.Refresh();

    }

    protected async Task DeleteStock(int id)
    {
        await StockService.DeleteStock(id);
        Grid.Refresh();

    }

    public async Task ToolbarClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (args.Item.Id == "Grid_excelexport") //Id is combination of Grid's ID and itemname
        {
            ExcelExportProperties ExcelProperties = new ExcelExportProperties();
            ExcelProperties.FileName = "Stock.xlsx";
            await this.Grid.ExcelExport(ExcelProperties);
        }
    }


}


