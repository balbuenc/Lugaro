@page "/PurchaseOrders"
@using Model
@using Interfaces
@inject IPurchaseOrderService PurchaseOrderService

@inject IEmployeeService EmployeeService

@using Microsoft.AspNetCore.Http

@inject AuthenticationStateProvider AuthenticationStateProvider

@inject IJSRuntime Js

@attribute [Authorize]
@using Syncfusion.Blazor
@using Syncfusion.Blazor.Data
@using Syncfusion.Blazor.Grids
@using System.Collections.ObjectModel
@inject NavigationManager NavigationManager
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Inputs;
@using Syncfusion.Blazor.Calendars;
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Popups

<style>
    .e-list-settings:before {
        content: "\e679";
    }

    .e-list-print:before {
        content: "\e743";
    }

    .e-list-save:before {
        content: "\e74d";
    }

    .e-list-saveas:before {
        content: "\e72b";
    }

    .e-list-delete:before {
        content: "\e773";
    }

    .e-list-undo:before {
        content: "\e197";
    }

    .e-list-edit:before {
        content: "\e7a3";
    }

    .e-list-printpdf:before {
        content: "\e240"
    }
</style>

<div class="container-fluid">
    <p>@Message</p>
    <span class="error">@ErrorDetails</span>

    <div class="col-lg-12" style="padding:1px; height:50px">
        <div class="content-wrapper">
            <div class="alert alert-title" role="banner"><b>Ordenes de Compra</b></div>
        </div>
    </div>


    <div class="col-lg-12 control-section">
        <div class="content-wrapper">
            <div class="row">
                @if (GridData == null)
                {
                    <div class="alert alert-warning" role="alert"><p><em>Cargando datos...</em></p></div>
                }
                else
                {
                    <SfGrid TValue="PurchaseOrder" ID="Grid" @ref="Grid" AllowPaging="true" Toolbar="@ToolbarItems" DataSource="@GridData" AllowExcelExport="true" ShowColumnChooser="true" AllowTextWrap="true" AllowFiltering="true">
                        <GridEvents OnActionBegin="OnBeginHandler"
                                    OnActionComplete="ActionCompletedHandler"
                                    TValue="PurchaseOrder"
                                    OnToolbarClick="ToolbarClickHandler"
                                    OnRecordDoubleClick="RecordDoubleClickHandler"
                                    CommandClicked="OnCommandClicked">
                        </GridEvents>
                        <GridPageSettings PageSize="30"></GridPageSettings>
                        <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"></GridFilterSettings>

                        <GridEditSettings AllowEditing="true" AllowDeleting="true" Mode="EditMode.Dialog" Dialog="DialogParams">
                            <HeaderTemplate>
                                @{
                                    var oc = (context as PurchaseOrder);
                                }
                                <span>Detalle de caja chica: @(oc.id_orden_compra)</span>
                            </HeaderTemplate>
                            <Template>
                                @{
                                    var oc = (context as PurchaseOrder);
                                    if (oc.fecha == t)
                                        oc.fecha = hoy;
                                }
                                <div>
                                    <div class="form-row">
                                        <div class="form-group col-md-3">
                                            <SfNumericTextBox @bind-Value="@(oc.id_orden_compra)" Enabled="false" Placeholder="ID" FloatLabelType="FloatLabelType.Always"></SfNumericTextBox>
                                        </div>
                                        <div class="form-group col-md-3">
                                            <SfDatePicker @bind-Value="@(oc.fecha)" Enabled="true" Placeholder="Fecha OC" FloatLabelType="FloatLabelType.Always"> </SfDatePicker>
                                        </div>
                                        <div class="form-group col-md-3">
                                            <SfDatePicker @bind-Value="@(oc.fecha_aprobacion)" Enabled="false" Placeholder="Fecha aprobación" FloatLabelType="FloatLabelType.Always"> </SfDatePicker>
                                        </div>

                                    </div>
                                    <div class="form-row">
                                        <div class="form-group col-md-6">
                                            <SfNumericTextBox @bind-Value="@(oc.id_compra)" Enabled="false" Placeholder="#Pedido" FloatLabelType="FloatLabelType.Always"></SfNumericTextBox>
                                        </div>
                                        <div class="form-group col-md-6">
                                            <SfNumericTextBox @bind-Value="@(oc.id_compra_general)" Enabled="false" Placeholder="#Compra" FloatLabelType="FloatLabelType.Always"></SfNumericTextBox>
                                        </div>

                                    </div>
                                </div>
                            </Template>
                        </GridEditSettings>
                        <GridColumns>
                            <GridColumn HeaderText="*" Width="10">
                                <GridCommandColumns>
                                    <GridCommandColumn Type="CommandButtonType.None" ButtonOption="@(new CommandButtonOptions() {IconCss="e-icons e-list-printpdf", CssClass="e-flat" })" Title="Imprimir"></GridCommandColumn>
                                </GridCommandColumns>
                            </GridColumn>
                            <GridColumn Field=@nameof(PurchaseOrder.id_orden_compra) HeaderText="ID" TextAlign="TextAlign.Center" Width="10" IsPrimaryKey="true"></GridColumn>
                            <GridColumn Field=@nameof(PurchaseOrder.fecha) HeaderText="Fecha" Visible="true" Width="10" Format="dd/MM/yyyy"></GridColumn>
                            <GridColumn Field=@nameof(PurchaseOrder.fecha_aprobacion) HeaderText="Aprobación" Width="15" Visible="true" Format="dd/MM/yyyy"></GridColumn>
                            <GridColumn Field=@nameof(PurchaseOrder.id_compra) HeaderText="#Pedido" Width="15" Visible="false" ></GridColumn>
                            <GridColumn Field=@nameof(PurchaseOrder.id_compra_general) HeaderText="#Compra" Width="20" Visible="false" ></GridColumn>
                            <GridColumn Field=@nameof(PurchaseOrder.tipo_compra) HeaderText="Tipo" Width="15"></GridColumn>
                            <GridColumn Field=@nameof(PurchaseOrder.propietario) HeaderText="Propietario" Width="15"></GridColumn>
                            <GridColumn Field=@nameof(PurchaseOrder.aprobador) HeaderText="Aprobador" Width="15" Visible="false" ></GridColumn>
                            <GridColumn Field=@nameof(PurchaseOrder.estado) HeaderText="Estado" Width="10"></GridColumn>
                        </GridColumns>
                    </SfGrid>
                }

            </div>
        </div>

        <SfDialog Width="400px" Height="200px" IsModal="true" @bind-Visible="@IsMessageVisible" ShowCloseIcon="true">
            <DialogEvents OnOverlayClick="@OnOverlayclick">
            </DialogEvents>

            <DialogTemplates>
                <Header>
                    <h1><b>Mensaje del sistema.</b></h1>
                </Header>
                <Content>
                    <div class="col-12">
                        <b>@SystemMessage</b>
                    </div>
                </Content>

            </DialogTemplates>

        </SfDialog>
    </div>

</div>


@code {
    //public IEnumerable<PurchaseOrder> clients { get; set; }
    public string Message { get; set; }
    public string SystemMessage { get; set; }

    public string[] ToolbarItems = new string[] { "Edit", "Delete", "Update", "Cancel", "ExcelExport", "Search", "ColumnChooser" };
    public string ErrorDetails = "";

    private bool IsMessageVisible { get; set; } = false;

    public IEnumerable<PurchaseOrder> GridData { get; set; }

    public IEnumerable<Employee> employees { get; set; }


    public DateTime hoy = DateTime.Today;
    public DateTime t;

    SfGrid<PurchaseOrder> Grid { get; set; }

    private DialogSettings DialogParams = new DialogSettings { Width = "850px", EnableResize = true, AllowDragging = true };

    public string UserName;
    public string Estado;

    private void OnOverlayclick(MouseEventArgs arg)
    {
        this.IsMessageVisible = false;
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            GridData = await PurchaseOrderService.GetAllPurchaseOrders();

            employees = await EmployeeService.GetAllEmployees();



            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            string[] subs = user.Identity.Name.Split("@");
            UserName = subs[0];
        }
        catch (Exception ex)
        {
            Message = "Error al obtener caja chicas [OnInitializedAsync] : " + ex.Message;
        }
    }



    private async Task OnBeginHandler(ActionEventArgs<PurchaseOrder> Args)
    {
        try
        {
            if (Args.RequestType == Syncfusion.Blazor.Grids.Action.Save)
            {
                await SavePurchaseOrder((PurchaseOrder)Args.Data);
            }
            else if (Args.RequestType == Syncfusion.Blazor.Grids.Action.Delete)
            {
                await DeletePurchaseOrder(((PurchaseOrder)Args.Data).id_orden_compra);
            }

            return;
        }
        catch (Exception ex)
        {
            Message = "Error al obtener caja chica [OnBeginHandler]: " + ex.Message + " Inner.: " + ex.InnerException;
            throw ex;
        }
    }



    private async Task ActionCompletedHandler(ActionEventArgs<PurchaseOrder> Args)
    {
        if (Args.RequestType == Syncfusion.Blazor.Grids.Action.Save || Args.RequestType == Syncfusion.Blazor.Grids.Action.Delete)
        {
            await RefreshGrid();
        }

    }

    protected async Task RefreshGrid()
    {
        GridData = await PurchaseOrderService.GetAllPurchaseOrders();
        Grid.Refresh();
    }

    public async void OnCommandClicked(CommandClickEventArgs<PurchaseOrder> args)
    {
        var item = args.RowData;
        var command = args.CommandColumn;

        if (command.Title == "Cerrar caja")
        {
            item.estado = "CERRADO";
            await PurchaseOrderService.SavePurchaseOrder(item);
            await RefreshGrid();
        }
        else if (command.Title == "Imprimir")
        {
            Print(item.id_orden_compra, item.tipo_compra);
        }

    }

    protected void Print(int purcharseOrderID, string tipo)
    {
        String route = "";

        if (tipo == "PEDIDO")
        {
            route = String.Concat("PurchaseOrderReport/", purcharseOrderID);
        }
        else if (tipo == "COMPRA")
        {
            route = String.Concat("GeneralPurchaseOrderReport/", purcharseOrderID);
        }


        Js.InvokeAsync<object>("open", route, "_blank");
    }

    protected async Task SavePurchaseOrder(PurchaseOrder purchaseOrder)
    {
        try
        {
            purchaseOrder.id_funcionario = GetEmployeeID(UserName);
            if (purchaseOrder.id_orden_compra == 0)
            {
                purchaseOrder.estado = "GENERADO";
            }

            //Create the new PurchaseOrder
            await PurchaseOrderService.SavePurchaseOrder(purchaseOrder);

        }
        catch (Exception ex)
        {
            Message = "Error al registrar order de compra: " + ex.Message;
            throw ex;
        }
    }





    protected async Task DeletePurchaseOrder(int id)
    {
        await PurchaseOrderService.DeletePurchaseOrder(id);
    }

    public async Task ToolbarClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (args.Item.Id == "Grid_excelexport") //Id is combination of Grid's ID and itemname
        {
            ExcelExportProperties ExcelProperties = new ExcelExportProperties();
            ExcelProperties.FileName = "OrdenesCompra.xlsx";
            await this.Grid.ExcelExport(ExcelProperties);
        }

    }

    public Int32 GetEmployeeID(string username)
    {
        int id;
        try
        {
            id = employees.First(c => c.usuario == username).id_funcionario;
            return id;
        }
        catch (Exception ex)
        {
            Message = "Error al obtener ID de usuario : " + ex.Message;
            return 1;
        }
    }

    public void RecordDoubleClickHandler(RecordDoubleClickEventArgs<PurchaseOrder> args)
    {
        Navigate(((PurchaseOrder)args.RowData));
    }

    private void Navigate(PurchaseOrder purchaseOrder)
    {
        if (purchaseOrder.tipo_compra == "PEDIDO")
        {
            NavigationManager.NavigateTo($"/PurchaseDetails/{purchaseOrder.id_compra}");
        }
        else if (purchaseOrder.tipo_compra == "COMPRA")
        {
            NavigationManager.NavigateTo($"/GeneralPurchaseDetails/{purchaseOrder.id_compra_general}");
        }

    }


}


