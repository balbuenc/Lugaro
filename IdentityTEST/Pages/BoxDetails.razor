@page "/BoxDetails/{LittleBoxID}"
@using Model
@using Interfaces

@inject ILittleBoxDetailsService LittleBoxDetailsService
@inject ILittleBoxService LittleBoxService
@inject IVendorService VendorService


@inject NavigationManager NavigationManager

@attribute [Authorize]

@using Syncfusion.Blazor
@using Syncfusion.Blazor.Data
@using Syncfusion.Blazor.Grids
@using System.Collections.ObjectModel
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Inputs;
@using Syncfusion.Blazor.Calendars;
@using Syncfusion.Blazor.Popups;
@using Syncfusion.Blazor.Notifications
@using Syncfusion.Blazor.Buttons

@inject AuthenticationStateProvider AuthenticationStateProvider

<style>
    .e-list-settings:before {
        content: "\e679";
    }

    .e-list-print:before {
        content: "\e743";
    }

    .e-list-save:before {
        content: "\e74d";
    }

    .e-list-saveas:before {
        content: "\e72b";
    }

    .e-list-delete:before {
        content: "\e33e";
    }

    .e-list-undo:before {
        content: "\e752";
    }

    .e-list-edit:before {
        content: "\e7a3";
    }


    .e-plus-icon::before {
        content: '\e823';
    }

</style>


<div class="container-fluid">
    <p>@Message</p>
    <span class="error">@ErrorDetails</span>

    <div class="col-lg-12" style="padding:1px; height:50px">
        <div class="content-wrapper">
            <div class="alert alert-title" role="banner"><b>Detalle de Caja Chica: @LittleBoxDenomination </b></div>
        </div>
    </div>


    <div class="col-lg-12 control-section">
        <div class="content-wrapper">
            <div class="row">
                @if (GridData == null)
                {
                    <div class="alert alert-warning" role="alert"><p><em>Cargando datos...</em></p></div>
                }
                else
                {
                    <SfGrid ID="Grid" @ref="Grid" AllowPaging="true" AllowSorting="true" Toolbar="@ToolbarItems" DataSource="@GridData" Locale="es-ES" ShowColumnChooser="true" AllowFiltering="true" AllowExcelExport="true">

                        <GridEvents OnActionBegin="OnBeginHandler" OnActionComplete="OnCompleteHandler" TValue="LittleBoxDetails" OnToolbarClick="ToolbarClickHandler"></GridEvents>
                        <GridPageSettings PageSize="20"></GridPageSettings>
                        <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"></GridFilterSettings>
                        <GridEditSettings AllowAdding="CanEdit" AllowEditing="true" AllowDeleting="CanEdit" Mode="EditMode.Dialog" Dialog="DialogParams">
                            <HeaderTemplate>
                                @{
                                    var det = (context as LittleBoxDetails);
                                }
                                <span>Detalle de gasto: @(det.nro_comprobante)</span>
                                <span class="badge-info"> @(det.nro_comprobante)</span>
                            </HeaderTemplate>
                            <Template>
                                @{
                                    var det = (context as LittleBoxDetails);
                                    if (det.fecha == t)
                                        det.fecha = hoy;
                                }
                                <div>
                                    <div class="form-row">
                                        <div class="form-group col-md-3">
                                            <SfNumericTextBox @bind-Value="@(det.id_caja_chica_detalle)" Enabled="false" Placeholder="ID" FloatLabelType="FloatLabelType.Always"></SfNumericTextBox>
                                        </div>
                                        <div class="form-group col-md-6">
                                            <SfTextBox @bind-Value="@(det.nro_comprobante)" Enabled="CanEdit" Placeholder="Nro. comprobante" FloatLabelType="FloatLabelType.Always"> </SfTextBox>
                                        </div>

                                    </div>
                                    <div class="form-row">
                                        <div class="form-group col-md-6">
                                            <SfDatePicker TValue="DateTime" @bind-Value="@(det.fecha)" Format="dd/MM/yyyy" Enabled="CanEdit" Placeholder="Fecha" FloatLabelType="FloatLabelType.Always"> </SfDatePicker>
                                        </div>

                                    </div>
                                    <div class="form-row">
                                        <div class="form-group col-md-10">
                                            <SfDropDownList DataSource="@vendors"
                                                        TItem="Vendor"
                                                        TValue="String"
                                                        @bind-Value="@(det.beneficiario)"
                                                        Enabled="CanEdit"
                                                        Placeholder="Beneficiario"
                                                        FloatLabelType="FloatLabelType.Always" AllowFiltering="true" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains">
                                                <DropDownListFieldSettings Value="razon_social" Text="proveedor"></DropDownListFieldSettings>
                                            </SfDropDownList>
                                        </div>
                                        <div class="form-group col-md-2">
                                            <SfButton CssClass="e-round" IconCss="e-icons e-plus-icon" IsPrimary="true" OnClick="ShowNewVendorDialog"></SfButton>
                                        </div>
                                    </div>
                                    <div class="form-row">

                                        <div class="form-group col-md-12">
                                            <SfTextBox @bind-Value="@(det.concepto)" Enabled="CanEdit" Placeholder="Concepto" FloatLabelType="FloatLabelType.Always"></SfTextBox>
                                        </div>

                                    </div>
                                    <div class="form-row">
                                        <div class="form-group col-md-12">
                                            <SfNumericTextBox @bind-Value="@(det.monto)" Enabled="CanEdit" Placeholder="Monto" FloatLabelType="FloatLabelType.Always"></SfNumericTextBox>
                                        </div>
                                    </div>

                                </div>
                            </Template>

                        </GridEditSettings>
                        <GridColumns>
                            <GridColumn Field=@nameof(LittleBoxDetails.id_caja_chica_detalle) HeaderText="ID" TextAlign="TextAlign.Center" Width="5" IsPrimaryKey="true"></GridColumn>
                            <GridColumn Field=@nameof(LittleBoxDetails.fecha) HeaderText="Fecha" Width="20" Format="dd/MM/yyyy"></GridColumn>
                            <GridColumn Field=@nameof(LittleBoxDetails.concepto) HeaderText="Concepto" Width="50"></GridColumn>
                            <GridColumn Field=@nameof(LittleBoxDetails.beneficiario) HeaderText="Beneficiario" Width="50"></GridColumn>
                            <GridColumn Field=@nameof(LittleBoxDetails.nro_comprobante) HeaderText="#Comprobante" Width="30"></GridColumn>
                            <GridColumn Field=@nameof(LittleBoxDetails.monto) HeaderText="Monto" Visible="true" Width="20" Format="N0"></GridColumn>
                        </GridColumns>

                    </SfGrid>
                }

            </div>
            <SfDialog Target="#target"
                      Width="300px"
                      Height="130px"
                      IsModal="true"
                      ShowCloseIcon="false"
                      @bind-Visible="DeleteRecordConfirmVisibility">
                <DialogTemplates>
                    <Header> Eliminar el registro? </Header>
                    <Content>
                        <div class="button-container">
                            <button type="submit"
                                    class="e-btn e-normal e-primary"
                                    @onclick="ConfirmDeleteYes">
                                Yes
                            </button>
                            <button type="submit"
                                    class="e-btn e-normal"
                                    @onclick="ConfirmDeleteNo">
                                No
                            </button>
                        </div>
                    </Content>
                </DialogTemplates>
            </SfDialog>

            <SfDialog Width="510px" IsModal="true" @bind-Visible="@IsNewVendorVisible">
                <DialogEvents OnOverlayClick="@OnOverlayclick">
                </DialogEvents>
                <DialogTemplates>
                    <Content>
                        <div class="row">
                            <div class="col-12">
                                <h5>Nuevo proveedor.</h5>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-12">
                                <SfTextBox Placeholder="Nombre del proveedor" FloatLabelType="@FloatLabelType.Auto" @bind-Value="@NewVendorName"></SfTextBox>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-12">
                                <SfTextBox Placeholder="RUC" FloatLabelType="@FloatLabelType.Auto" @bind-Value="@NewVendorRUC"></SfTextBox>
                            </div>
                        </div>
                    </Content>
                </DialogTemplates>
                <DialogButtons>
                    <DialogButton Content="OK" IsPrimary="true" OnClick="@NewVendor" />
                    <DialogButton Content="Cancel" IsPrimary="true" OnClick="@OnOverlayclick" />
                </DialogButtons>
            </SfDialog>

            <SfToast @ref="ToastObj" Title="@ToastTitle" Content="@ToastContent" CssClass="@ToastCssClass">
                <ToastPosition X="Right" Y="Bottom"></ToastPosition>
            </SfToast>


        </div>

    </div>

</div>

<style>
    #toast_default .e-meeting::before {
        content: "\e705";
        font-size: 17px;
    }
</style>

@code {


    [Parameter]
    public string LittleBoxID { get; set; }

    public DateTime hoy = DateTime.Today;
    public DateTime t;

    public string Message { get; set; }
    public string[] ToolbarItems = new string[] { "Add", "Edit", "Delete", "Update", "Cancel", "ExcelExport", "Search", "ColumnChooser" };
    public string ErrorDetails = "";

    public bool CanEdit { get; set; } = true;

    public IEnumerable<LittleBoxDetails> GridData { get; set; }
    public IEnumerable<Employee> employees { get; set; }
    public IEnumerable<Vendor> vendors { get; set; }
    public LittleBox box;

    public bool IsNewVendorVisible { get; set; } = false;
    public string NewVendorName = "";
    public string NewVendorRUC = "";
    private Int32 SelectedDetailID { get; set; } = 0;


    public bool EditDialogVisibility { get; set; } = false;
    public bool DeleteRecordConfirmVisibility { get; set; } = false;

    public Int32 ID = 0;

    public string UserName;

    public string LittleBoxDenomination;

    SfToast ToastObj;

    private int ToastFlag = 0;
    private string ToastTitle = "";
    private string ToastContent = "";
    private string ToastCssClass = "";


    private class ToastOption
    {
        public string Title { get; set; }
        public string Content { get; set; }
        public string CssClass { get; set; }
    }

    private ToastOption[] Toasts = new ToastOption[] {
        new ToastOption { Title = "Warning !", Content = "El registro se eliminó con éxito.", CssClass = "e-toast-warning" },
        new ToastOption { Title = "Success !", Content = "El registro se modificó con éxito.", CssClass = "e-toast-success" },
        new ToastOption { Title = "Error !", Content = "A problem has been occurred while submitting your data.", CssClass = "e-toast-danger" },
        new ToastOption { Title = "Information !", Content = "Please read the comments carefully.", CssClass = "e-toast-info" }
    };


    private DialogSettings DialogParams = new DialogSettings { Width = "850px", EnableResize = true, AllowDragging = true };

    SfGrid<LittleBoxDetails> Grid { get; set; }

    private void OnOverlayclick(MouseEventArgs arg)
    {
        this.IsNewVendorVisible = false;
    }

    public void ShowNewVendorDialog()
    {
        NewVendorName = "";
        NewVendorRUC = "";
        this.IsNewVendorVisible = true;
    }



    protected async Task NewVendor()
    {
        Vendor v = new Vendor();
        v.proveedor = NewVendorName.ToUpper();
        v.razon_social = NewVendorName.ToUpper();
        v.ruc = NewVendorRUC;
        v.id_pais = 1;

        //Creo el nuevo Proveedor
        await VendorService.SaveVendor(v);


        int id = Int32.Parse(LittleBoxID);
        GridData = await LittleBoxDetailsService.GetAllLittleBoxDetail(id);

        vendors = await VendorService.GetVendorsDDL();
        Grid.Refresh();

        await Task.Delay(200);

        var IX = await Grid.GetRowIndexByPrimaryKey(SelectedDetailID);
        if (IX != -1)
        {
            await Grid.SelectRow(IX);
            await Grid.StartEdit();
        }
        else
        {
            await Grid.AddRecord();
        }

        SelectedDetailID = 0;

        this.IsNewVendorVisible = false;
    }



    protected override async Task OnInitializedAsync()
    {
        try
        {
            int id = Int32.Parse(LittleBoxID);
            GridData = await LittleBoxDetailsService.GetAllLittleBoxDetail(id);
            box = await LittleBoxService.GetLittleBoxDetails(id);
            vendors = await VendorService.GetVendorsDDL();

            if (box.estado == "CERRADO" || box.estado == "PENDIENTE")
            {
                CanEdit = false;
            }

            UpdateLittleBoxStatus();

            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            string[] subs = user.Identity.Name.Split("@");
            UserName = subs[0];

        }
        catch (Exception ex)
        {
            Message = "Error al obtener detalle de la caja: " + ex.Message;
        }
    }

    protected void UpdateLittleBoxStatus()
    {
        try
        {
            LittleBoxDenomination = "Caja" + LittleBoxID + " - Gastos: " + GridData.First<LittleBoxDetails>().total_gasto.ToString("N0") + " | Saldo: " + GridData.First<LittleBoxDetails>().saldo.ToString("N0");
        }
        catch (Exception ex)
        {
            LittleBoxDenomination = "Caja" + LittleBoxID;
        }
    }

    public async Task ToolbarClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (args.Item.Id == "Grid_excelexport") //Id is combination of Grid's ID and itemname
        {
            ExcelExportProperties ExcelProperties = new ExcelExportProperties();
            ExcelProperties.FileName = LittleBoxDenomination + ".xlsx";
            await this.Grid.ExcelExport(ExcelProperties);
        }
    }


    private async Task OnBeginHandler(ActionEventArgs<LittleBoxDetails> Args)
    {
        if (Args.RequestType == Syncfusion.Blazor.Grids.Action.BeginEdit || Args.RequestType == Syncfusion.Blazor.Grids.Action.Add)
        {
            try
            {
                SelectedDetailID = ((LittleBoxDetails)Args.Data).id_caja_chica_detalle;
            }
            catch (Exception ex)
            {
                SelectedDetailID = 0;
            }
        }
        else if (Args.RequestType == Syncfusion.Blazor.Grids.Action.Save)
        {
            await SaveLittleBoxDetails((LittleBoxDetails)Args.Data);

        }
        else if (Args.RequestType == Syncfusion.Blazor.Grids.Action.Delete)
        {
            ID = ((LittleBoxDetails)Args.Data).id_caja_chica_detalle;

            // Open Delete confirmation dialog
            this.DeleteRecordConfirmVisibility = true;
            StateHasChanged();
        }

        return;
    }

    private async Task OnCompleteHandler(ActionEventArgs<LittleBoxDetails> Args)
    {
        if (Args.RequestType == Syncfusion.Blazor.Grids.Action.Save)
        {
            await ShowToast(1);
            GridData = await LittleBoxDetailsService.GetAllLittleBoxDetail(Int32.Parse(LittleBoxID));
            Grid.Refresh();

        }
        else if (Args.RequestType == Syncfusion.Blazor.Grids.Action.Delete)
        {

            StateHasChanged();
        }

        UpdateLittleBoxStatus();

        return;
    }

    protected async Task SaveLittleBoxDetails(LittleBoxDetails littleBoxDetail)
    {
        littleBoxDetail.id_caja_chica = Int32.Parse(LittleBoxID);

        await LittleBoxDetailsService.SaveLittleBoxDetail(littleBoxDetail);
        Grid.Refresh();

    }

    protected async Task DeleteLittleBoxDetails(int id)
    {
        await LittleBoxDetailsService.DeleteLittleBoxDetail(id);
        await ShowToast(0);
        Grid.Refresh();

    }



    public async Task ConfirmDeleteYes()
    {
        // The user selected Yes to delete the
        // seleted Help Desk Ticket
        // Delete the record
        await DeleteLittleBoxDetails(ID);

        // Close the dialog
        this.DeleteRecordConfirmVisibility = false;

        // Refresh the SfGrid
        // so the deleted record will not show
        Grid.Refresh();
    }

    public async Task ConfirmDeleteNo()
    {
        // Open the dialog
        // to give the user a chance
        // to confim they want to delete the record
        this.DeleteRecordConfirmVisibility = false;
    }

    public Int32 GetEmployeeID(string username)
    {
        int id;
        try
        {
            id = employees.First(c => c.usuario == username).id_funcionario;
            return id;
        }
        catch (Exception ex)
        {
            Message = "Error al obtener ID de usuario : " + ex.Message;
            return 1;
        }
    }

    private async Task ShowToast(int ix)
    {
        this.ToastTitle = this.Toasts[ix].Title;
        this.ToastContent = this.Toasts[ix].Content;
        this.ToastCssClass = this.Toasts[ix].CssClass;
        await Task.Delay(200);

        await this.ToastObj.Show();

    }



    private async Task HideToast()
    {

        await this.ToastObj.Hide("All");
    }
}


