@page "/DetalleNeighborhood"
@page "/DetalleNeighborhood/{id:int}"
@using Model
@using Interfaces
@inject INeighborhoodService NeighborhoodService
@inject ICityService CityService
@inject NavigationManager NavigationManager
@attribute [Authorize]


<div class="col-12">
    <div class="alert alert-warning" role="alert" style="width:100%"><h4>@Title</h4></div>
</div>
<div class="col-12">

    <EditForm Model="@barrio" OnValidSubmit="SaveNeighborhood">
        <DataAnnotationsValidator></DataAnnotationsValidator>

        <div class="table-responsive">
            <table class="table table-sm table-borderless">
                <tr>
                    <td>ID</td>
                    <td><input type="text" @bind="barrio.id_barrio" disabled="disabled" class="form-control" /></td>
                </tr>
                <tr>
                    <td>Ciudad</td>
                    
                    <td>
                        <InputSelect id="city" @bind-Value="barrio.id_ciudad" class="form-control">
                            @foreach (var city in cities)
                            {
                                <option value="@city.id_ciudad">@city.ciudad</option>
                            }
                        </InputSelect>
                    </td>
                </tr>
                <tr>
                    <td>Barrio</td>
                    <td><input type="text" @bind="barrio.barrio" class="form-control" /></td>
                </tr>

                <tr><td colspan="2"> <ValidationMessage For="@(() => barrio.barrio)"></ValidationMessage></td></tr>


                <tr>
                    <td colspan="2" style="text-align:right">
                        <input type="submit" value="Save" class="btn btn-success" />
                        <input type="button" value="Cancel" @onclick="Cancel" class="btn btn-danger" />
                    </td>
                </tr>

            </table>
        </div>
    </EditForm>
</div>



@code {

    [Parameter]
    public int id { get; set; }

    
    public List<City> cities { get; set; } = new List<City>();

   
    private String Title = "Detalles del Barrio";

    Neighborhood barrio = new Neighborhood();

    protected async override Task OnInitializedAsync()
    {
        if (id > 0)
        {
            barrio = await NeighborhoodService.GetNeighborhoodDetails(id);
            Title = "Detalles del Barrio";
        }
        else
        {
            Title = "Agregar nuevo Barrio";
        }


        await Load();
    }

    protected async Task Load()
    {
        cities = (await CityService.GetAllCities()).ToList();
    }

    protected async Task SaveNeighborhood()
    {
        await NeighborhoodService.SaveNeighborhood(barrio);

        NavigateToNeighborhoods();
    }

    public void Cancel()
    {
        NavigateToNeighborhoods();
    }

    public void NavigateToNeighborhoods()
    {
        NavigationManager.NavigateTo("/Neighborhood");
    }
}
