@page "/Configurations"
@using Syncfusion.Blazor.Grids
@using Model
@using Interfaces
@inject IConfigurationService ConfigurationService
@attribute [Authorize]
@using System.Collections.ObjectModel
@using Syncfusion.Blazor.Inputs
@using System.IO


<div class="container-fluid">
    <p>@Message</p>

    <div class="col-lg-12" style="padding:1px; height:50px">
        <div class="content-wrapper">
            <div class="alert alert-primary" role="banner"><b>Configuración general</b></div>
        </div>
    </div>



    <SfUploader  ID="Uploader" @ref="Uploader"  AutoUpload="false" Multiple="false" >
        <UploaderEvents ValueChange="OnChange"></UploaderEvents>
    </SfUploader>
    <div class="col-lg-12 control-section">
        <div class="content-wrapper">
            <div class="row">
                @if (GridData == null)
                {
                    <div class="alert alert-warning" role="alert"><p><em>Cargando datos...</em></p></div>
                }
                else
                {
                    <SfGrid ID="Grid" @ref="Grid" AllowPaging="true" AllowSorting="true" Toolbar="@ToolbarItems"  DataSource="@GridData">

                        <GridEvents OnActionBegin="OnBeginHandler" TValue="Configuration"></GridEvents>
                        <GridPageSettings PageSize="20"></GridPageSettings>

                        <GridEditSettings AllowAdding="true" AllowEditing="true" AllowDeleting="true" Mode="EditMode.Dialog"></GridEditSettings>
                        <GridColumns>
                            <GridColumn Field=@nameof(Configuration.id_configuracion) HeaderText="ID" TextAlign="TextAlign.Center" Width="30" IsPrimaryKey="true"></GridColumn>
                            <GridColumn Field=@nameof(Configuration.parametro) HeaderText="Parametro" Width="150"></GridColumn>
                            <GridColumn Field=@nameof(Configuration.valor) HeaderText="Parametro" Width="150"></GridColumn>
                        </GridColumns>
                    </SfGrid>
                }
            </div>
        </div>
    </div>
</div>





@code {

    public string Message { get; set; }
    public string[] ToolbarItems = new string[] { "Add", "Edit", "Delete", "Update", "Cancel", "Search" };

    public ObservableCollection<Configuration> GridData { get; set; }

    SfGrid<Configuration> Grid { get; set; }
    SfUploader Uploader { get; set; }

    Configuration conf { get; set; } = new Configuration();

    protected async override Task OnInitializedAsync()
    {
        try
        {
            GridData = new ObservableCollection<Configuration>(await ConfigurationService.GetAllConfigurations());
        }
        catch (Exception ex)
        {
            Message = "Error al obtener areas: " + ex.Message;
        }
    }

    private async Task OnBeginHandler(ActionEventArgs<Configuration> Args)
    {
        if (Args.RequestType == Syncfusion.Blazor.Grids.Action.Save)
        {
            await SaveConfiguration((Configuration)Args.Data);
        }
        else if (Args.RequestType == Syncfusion.Blazor.Grids.Action.Delete)
        {
            await DeleteConfiguration(((Configuration)Args.Data).id_configuracion);
        }

        return;
    }

    protected async Task SaveConfiguration(Configuration nationality)
    {
        await ConfigurationService.SaveConfiguration(nationality);
        Grid.Refresh();
    }

    protected async Task DeleteConfiguration(int id)
    {
        await ConfigurationService.DeleteConfiguration(id);
        Grid.Refresh();
    }

    private async void OnChange(UploadChangeEventArgs args)
    {
        string path = "./wwwroot/Images/";
        foreach (var file in args.Files)
        {
            path = path + file.FileInfo.Name;
            conf.parametro = "MainLogo";
            conf.valor = "Images/" + file.FileInfo.Name;
            FileStream filestream = new FileStream(path, FileMode.Create, FileAccess.Write);
            file.Stream.WriteTo(filestream);
            filestream.Close();
            file.Stream.Close();
        }

        //Save Logo Path to Database
        await ConfigurationService.SaveConfiguration(conf);

    }
}

