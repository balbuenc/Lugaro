@page "/LittleBoxes"
@using Model
@using Interfaces
@inject ILittleBoxService LittleBoxService

@inject IEmployeeService EmployeeService

@using Microsoft.AspNetCore.Http

@inject AuthenticationStateProvider AuthenticationStateProvider


@attribute [Authorize]
@using Syncfusion.Blazor
@using Syncfusion.Blazor.Data
@using Syncfusion.Blazor.Grids
@using System.Collections.ObjectModel
@inject NavigationManager NavigationManager
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Inputs;
@using Syncfusion.Blazor.Calendars;
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Navigations

<style>
    .e-list-settings:before {
        content: "\e679";
    }

    .e-list-print:before {
        content: "\e743";
    }

    .e-list-save:before {
        content: "\e74d";
    }

    .e-list-saveas:before {
        content: "\e72b";
    }

    .e-list-delete:before {
        content: "\e773";
    }

    .e-list-undo:before {
        content: "\e752";
    }

    .e-list-edit:before {
        content: "\e7a3";
    }
</style>

<div class="container-fluid">
    <p>@Message</p>
    <span class="error">@ErrorDetails</span>

    <div class="col-lg-12" style="padding:1px; height:50px">
        <div class="content-wrapper">
            <div class="alert alert-title" role="banner"><b>Cajas Chicas</b></div>
        </div>
    </div>


    <div class="col-lg-12 control-section">
        <div class="content-wrapper">
            <div class="row">
                @if (GridData == null)
                {
                    <div class="alert alert-warning" role="alert"><p><em>Cargando datos...</em></p></div>
                }
                else
                {
                    @*<SfButton OnClick="ExcelExport" Content="Excel Export"></SfButton>*@
                    <SfGrid TValue="LittleBox" ID="Grid" @ref="Grid" AllowPaging="true" Toolbar="@ToolbarItems" DataSource="@GridData" AllowExcelExport="true" ShowColumnChooser="true" AllowTextWrap="true" AllowFiltering="true">
                        <GridEvents OnActionBegin="OnBeginHandler" OnActionComplete="ActionCompletedHandler" TValue="LittleBox" OnToolbarClick="ToolbarClickHandler" OnRecordDoubleClick="RecordDoubleClickHandler"></GridEvents>
                        <GridPageSettings PageSize="30"></GridPageSettings>
                        <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"></GridFilterSettings>

                        <GridEditSettings AllowAdding="true" AllowEditing="true" AllowDeleting="true" Mode="EditMode.Dialog" Dialog="DialogParams">
                            <HeaderTemplate>
                                @{
                                    var little = (context as LittleBox);
                                }
                                <span>Detalle de presupuesto: @(little.id_caja_chica)</span>
                            </HeaderTemplate>
                            <Template>
                                @{
                                    var little = (context as LittleBox);
                                    if (little.fecha_apertura == t)
                                        little.fecha_apertura = hoy;
                                }
                                <div>
                                    <div class="form-row">
                                        <div class="form-group col-md-3">
                                            <SfNumericTextBox @bind-Value="@(little.id_caja_chica)" Enabled="false" Placeholder="ID" FloatLabelType="FloatLabelType.Always"></SfNumericTextBox>
                                        </div>
                                        <div class="form-group col-md-3">
                                            <SfDatePicker @bind-Value="@(little.fecha_apertura)" Enabled="true" Placeholder="Fecha apertura" FloatLabelType="FloatLabelType.Always"> </SfDatePicker>
                                        </div>
                                        <div class="form-group col-md-3">
                                            <SfDatePicker @bind-Value="@(little.fecha_cierre)" Enabled="false" Placeholder="Fecha cierre" FloatLabelType="FloatLabelType.Always"> </SfDatePicker>
                                        </div>
                                       
                                    </div>
                                    <div class="form-row">
                                        
                                        <div class="form-group col-md-9">
                                            <SfDropDownList DataSource="@employees"
                                                            TItem="Employee"
                                                            TValue="Int32"
                                                            @bind-Value="@(little.id_funcionario)"
                                                            Placeholder="Responsable"
                                                            FloatLabelType="FloatLabelType.Always" AllowFiltering="true" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains">
                                                <DropDownListFieldSettings Value="id_funcionario" Text="usuario"></DropDownListFieldSettings>
                                            </SfDropDownList>
                                        </div>
                                    </div>
                                    <div class="form-row">
                                        <div class="form-group col-md-6">
                                            <SfTextBox @bind-Value="@(little.nro_comprobante)" Enabled="true" Placeholder="Comprobante" FloatLabelType="FloatLabelType.Always"></SfTextBox>
                                        </div>
                                        <div class="form-group col-md-6">
                                            <SfNumericTextBox @bind-Value="@(little.monto_apertura)" Enabled="true" Placeholder="Monto apertura" FloatLabelType="FloatLabelType.Always"></SfNumericTextBox>
                                        </div>

                                    </div>
                                    
                                   
                                   

                                </div>
                            </Template>
                        </GridEditSettings>
                        <GridColumns>
                            <GridColumn HeaderText="*" Width="8">
                                <GridCommandColumns>
                                    <GridCommandColumn Type="CommandButtonType.Edit" ButtonOption="@(new CommandButtonOptions() {IconCss="e-icons e-list-edit", CssClass="e-flat" })"></GridCommandColumn>
                                </GridCommandColumns>
                            </GridColumn>
                            <GridColumn Field=@nameof(LittleBox.id_caja_chica) HeaderText="ID" TextAlign="TextAlign.Center" Width="10" IsPrimaryKey="true"></GridColumn>
                            <GridColumn Field=@nameof(LittleBox.fecha_apertura) HeaderText="Apertura" Visible="true" Width="15" Format="dd/MM/yyyy"></GridColumn>
                            <GridColumn Field=@nameof(LittleBox.fecha_cierre) HeaderText="Cierre" Width="15" Visible="true"></GridColumn>
                            <GridColumn Field=@nameof(LittleBox.usuario) HeaderText="#Comprobante" Width="15"></GridColumn>
                            <GridColumn Field=@nameof(LittleBox.monto_apertura) HeaderText="Monto apert." Width="20" Format="N0"></GridColumn>
                            <GridColumn Field=@nameof(LittleBox.usuario) HeaderText="Responsable" Width="15"></GridColumn>
                            <GridColumn Field=@nameof(LittleBox.estado) HeaderText="Estado" Format="dd/MM/yyyy" Width="15"></GridColumn>


                        </GridColumns>
                    </SfGrid>
                }

            </div>
        </div>

    </div>

</div>


@code {
    //public IEnumerable<LittleBox> clients { get; set; }
    public string Message { get; set; }
    public string[] ToolbarItems = new string[] { "Add", "Edit", "Delete", "Update", "Cancel", "ExcelExport", "Search", "ColumnChooser" };
    public string ErrorDetails = "";

    public IEnumerable<LittleBox> GridData { get; set; }
  
    public IEnumerable<Employee> employees { get; set; }
  

    public DateTime hoy = DateTime.Today;
    public DateTime t;

    SfGrid<LittleBox> Grid { get; set; }

    private DialogSettings DialogParams = new DialogSettings { Width = "850px", EnableResize = true, AllowDragging = true };

    public string UserName;


    protected override async Task OnInitializedAsync()
    {
        try
        {
            GridData = await LittleBoxService.GetAllLittleBoxs();
          
            employees = await EmployeeService.GetAllEmployees();
          


            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            string[] subs = user.Identity.Name.Split("@");
            UserName = subs[0];
        }
        catch (Exception ex)
        {
            Message = "Error al obtener caja chicas [OnInitializedAsync] : " + ex.Message;
        }
    }



    private async Task OnBeginHandler(ActionEventArgs<LittleBox> Args)
    {
        try
        {
            if (Args.RequestType == Syncfusion.Blazor.Grids.Action.Save)
            {
                await SaveLittleBox((LittleBox)Args.Data);
            }
            else if (Args.RequestType == Syncfusion.Blazor.Grids.Action.Delete)
            {
                await DeleteLittleBox(((LittleBox)Args.Data).id_caja_chica);
            }

            return;
        }
        catch (Exception ex)
        {
            Message = "Error al obtener caja chica [OnBeginHandler]: " + ex.Message + " Inner.: " + ex.InnerException;
            throw ex;
        }
    }

    private async Task ActionCompletedHandler(ActionEventArgs<LittleBox> Args)
    {
        if (Args.RequestType == Syncfusion.Blazor.Grids.Action.Save || Args.RequestType == Syncfusion.Blazor.Grids.Action.Delete)
        {
            GridData = await LittleBoxService.GetAllLittleBoxs();
            Grid.Refresh();
        }

    }


    protected async Task SaveLittleBox(LittleBox littleBox)
    {
        try
        {
            littleBox.id_funcionario = GetEmployeeID(UserName);
            await LittleBoxService.SaveLittleBox(littleBox);
        }
        catch (Exception ex)
        {
            Message = "Error al registrar caja chica: " + ex.Message;
            throw ex;
        }
    }

    protected async Task DeleteLittleBox(int id)
    {
        await LittleBoxService.DeleteLittleBox(id);
    }

    public async Task ToolbarClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (args.Item.Id == "Grid_excelexport") //Id is combination of Grid's ID and itemname
        {
            ExcelExportProperties ExcelProperties = new ExcelExportProperties();
            ExcelProperties.FileName = "CajasChicas.xlsx";
            await this.Grid.ExcelExport(ExcelProperties);
        }

    }

    public Int32 GetEmployeeID(string username)
    {
        int id;
        try
        {
            id = employees.First(c => c.usuario == username).id_funcionario;
            return id;
        }
        catch (Exception ex)
        {
            Message = "Error al obtener ID de usuario : " + ex.Message;
            return 1;
        }
    }

    public void RecordDoubleClickHandler(RecordDoubleClickEventArgs<LittleBox> args)
    {
        Navigate(((LittleBox)args.RowData));
    }

    private void Navigate(LittleBox littleBox)
    {
        NavigationManager.NavigateTo($"/LittleBoxDetails/{littleBox.id_caja_chica}");
    }


}


