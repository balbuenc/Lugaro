@page "/SaleReports"
@using Model
@using Interfaces

@inject ISaleService SaleService
@inject IEmployeeService EmployeeService


@using Microsoft.AspNetCore.Http

@inject AuthenticationStateProvider AuthenticationStateProvider


@attribute [Authorize(Roles = "Administrators, Sales,Services")]
@using Syncfusion.Blazor
@using Syncfusion.Blazor.Data
@using Syncfusion.Blazor.Grids
@using System.Collections.ObjectModel
@inject NavigationManager NavigationManager
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Inputs;
@using Syncfusion.Blazor.Calendars;
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Navigations

@using Microsoft.AspNetCore.Authorization
@inject IAuthorizationService AuthorizationService

@inject IJSRuntime Js

<style>
    .e-list-settings:before {
        content: "\e679";
    }

    .e-list-print:before {
        content: "\e743";
    }

    .e-list-save:before {
        content: "\e74d";
    }

    .e-list-saveas:before {
        content: "\e72b";
    }

    .e-list-delete:before {
        content: "\e773";
    }

    .e-list-undo:before {
        content: "\e752";
    }

    .e-list-edit:before {
        content: "\e7a3";
    }

    .e-list-printpdf:before {
        content: "\e240"
    }
</style>



<div class="container-fluid">
    <p>@Message</p>
    <span class="error">@ErrorDetails</span>


    <div class="col-lg-12" style="padding:1px; height:50px">
        <div class="content-wrapper">
            <div class="alert alert-title" role="banner"><b>FACTURAS VENTAS</b></div>
        </div>
    </div>


    <div class="col-lg-12 control-section">
        <div class="content-wrapper">
            <div class="row">
                @if (GridData == null)
                {
                    <div class="alert alert-warning" role="alert"><p><em>Cargando datos...</em></p></div>
                }
                else
                {
                    <SfGrid TValue="Sale" ID="Grid" @ref="Grid" AllowPaging="true" Toolbar="@ToolbarItems" DataSource="@GridData" AllowExcelExport="true" ShowColumnChooser="true" AllowTextWrap="true" AllowFiltering="true" AllowSorting="true">
                        <GridEvents OnActionBegin="OnBeginHandler" OnActionComplete="ActionCompletedHandler" TValue="Sale" OnToolbarClick="ToolbarClickHandler" CommandClicked="OnCommandClicked"></GridEvents>
                        <GridPageSettings PageSize="30"></GridPageSettings>
                        <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"></GridFilterSettings>

                        <GridColumns>
                            <GridColumn HeaderText="*" Width="15">
                                <GridCommandColumns>
                                    <GridCommandColumn Type="CommandButtonType.None" ButtonOption="@(new CommandButtonOptions() {IconCss="e-icons e-list-printpdf", CssClass="e-flat" })" Title="Imprimir"></GridCommandColumn>
                                </GridCommandColumns>
                            </GridColumn>

                            <GridColumn Field=@nameof(Sale.factura) HeaderText="#Fact." Visible="true" Width="30" IsPrimaryKey="true"></GridColumn>
                            <GridColumn Field=@nameof(Sale.fecha) HeaderText="Fecha" Format="dd/MM/yyyy" Width="30"></GridColumn>
                            <GridColumn Field=@nameof(Sale.vendedor) HeaderText="Usuario" Width="30" Visible="true"></GridColumn>
                            <GridColumn Field=@nameof(Sale.cliente) HeaderText="Cliente" Width="30"></GridColumn>
                            <GridColumn Field=@nameof(Sale.estado) HeaderText="Estado" Width="30"></GridColumn>
                            <GridColumn Field=@nameof(Sale.condicion) HeaderText="Condición" Width="35"></GridColumn>
                            <GridColumn Field=@nameof(Sale.moneda) HeaderText="Mon." Width="25"></GridColumn>
                            <GridColumn Field=@nameof(Sale.importe) HeaderText="Importe" Visible="true" Width="30" TextAlign="TextAlign.Right">
                                <Template>
                                    @{
                                        var sal = (context as Sale);
                                        if (sal.moneda == "Guaraní")
                                        {
                                            <b>@sal.importe.ToString("N0")</b>
                                        }
                                        else
                                        {
                                            <b>@sal.importe.ToString("N2")</b>
                                        }

                                    }
                                </Template>
                            </GridColumn>
                            <GridColumn Field=@nameof(Sale.motivo_anulacion) HeaderText="Motivo" Width="30"></GridColumn>
                        </GridColumns>
                    </SfGrid>

                    <style>
                        .e-grid th.e-headercell {
                            background-color: lightgray;
                        }



                        .e-grid tr.e-row.e-row {
                            background-color: whitesmoke;
                        }

                        .e-headercell {
                            font-family: "Segoe UI";
                            font-weight: bold;
                            color: black
                        }
                    </style>
                }

            </div>
        </div>

    </div>

</div>


@code {
    //public IEnumerable<Sale> clients { get; set; }
    public string Message { get; set; }
    public string[] ToolbarItems = new string[] { "ExcelExport", "Search", "ColumnChooser" };
    public string ErrorDetails = "";

    public IEnumerable<Sale> GridData { get; set; }

    public IEnumerable<Employee> employees { get; set; }




    SfGrid<Sale> Grid { get; set; }

    private DialogSettings DialogParams = new DialogSettings { Width = "850px", EnableResize = true, AllowDragging = true };

    public string UserName;



    //Authorization UserPermissions
    AuthorizationMatrix UserPermissions = new AuthorizationMatrix();

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private async Task AuthorizeUser(AuthorizationMatrix m)
    {
        var user = (await authenticationStateTask).User;

        if (!user.Identity.IsAuthenticated)
        {
            m.CanView = false;
            m.CanViewOnlyOwned = true;
            m.CanEdit = false;
            m.CanCreate = false;
            m.CanDelete = false;
        }

        if (user.IsInRole("Administrators"))
        {
            // Perform an action only available to users in the 'admin' role.
            m.CanView = true;
            m.CanViewOnlyOwned = false;
            m.CanEdit = true;
            m.CanCreate = true;
            m.CanDelete = true;
        }
        else if (user.IsInRole("Sales"))
        {
            m.CanView = true;
            m.CanViewOnlyOwned = true;
            m.CanEdit = true;
            m.CanCreate = true;
            m.CanDelete = false;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {

            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            string[] subs = user.Identity.Name.Split("@");
            UserName = subs[0];

            await AuthorizeUser(UserPermissions);

            GridData = await SaleService.GetAllSales();

            employees = await EmployeeService.GetAllEmployees();



        }
        catch (Exception ex)
        {
            Message = "Error al obtener presupuestos [OnInitializedAsync] : " + ex.Message;
        }
    }



    private async Task OnBeginHandler(ActionEventArgs<Sale> Args)
    {
        try
        {
            return;
        }
        catch (Exception ex)
        {
            Message = "Error al obtener facturas [OnBeginHandler]: " + ex.Message + " Inner.: " + ex.InnerException;
            throw ex;
        }
    }

    private async Task ActionCompletedHandler(ActionEventArgs<Sale> Args)
    {
        if (Args.RequestType == Syncfusion.Blazor.Grids.Action.Save || Args.RequestType == Syncfusion.Blazor.Grids.Action.Delete)
        {
            GridData = await SaleService.GetAllSales();
            Grid.Refresh();
        }

    }





    public async Task ToolbarClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (args.Item.Id == "Grid_excelexport") //Id is combination of Grid's ID and itemname
        {
            ExcelExportProperties ExcelProperties = new ExcelExportProperties();
            ExcelProperties.IncludeTemplateColumn = true;
            ExcelProperties.FileName = "Ventas.xlsx";
            await this.Grid.ExcelExport(ExcelProperties);
        }

    }

    public Int32 GetEmployeeID(string username)
    {
        int id;
        try
        {
            id = employees.First(c => c.usuario == username).id_funcionario;
            return id;
        }
        catch (Exception ex)
        {
            Message = "Error al obtener ID de usuario : " + ex.Message;
            return 1;
        }
    }

    public async void OnCommandClicked(CommandClickEventArgs<Sale> args)
    {
        var item = args.RowData;
        var command = args.CommandColumn;

        if (command.Title == "Imprimir")
        {
            await Print(item.factura, item.moneda);
        }
    }

    protected async Task Print(String factura, String Moneda)
    {
        try
        {

            //Call Reporting Service WSL
            String route;

            if (Moneda == "Dolar")
            {
                route = String.Concat("DolarInvoiceReportByNumber/", factura);
            }
            else
            {
                route = String.Concat("InvoiceReportByNumber/", factura);
            }

            await Js.InvokeAsync<object>("open", route, "_blank");

        }
        catch (Exception ex)
        {
            ErrorDetails = "Error en impresión, " + ex.Message;
        }
    }


}


