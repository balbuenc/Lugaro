
@using Model
@using Interfaces
@inject IProductService ProductService

@attribute [Authorize]
@using Syncfusion.Blazor
@using Syncfusion.Blazor.Data
@using Syncfusion.Blazor.Grids
@using System.Collections.ObjectModel
@inject NavigationManager NavigationManager
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Inputs;
@using Syncfusion.Blazor.Calendars;
@using Syncfusion.Blazor.Buttons

<style>
    .eng {
        color: #187ac7;
        font-size: smaller;
    }
</style>

<div class="container-fluid">

    <div class="col-lg-12 control-section">
        <div class="content-wrapper">
            <div class="row">
                <div class="col-12">
                    @if (GridData == null)
                    {
                        <div class="alert alert-warning" role="alert"><p><em>Cargando datos...</em></p></div>
                    }
                    else
                    {
                        <SfGrid ID="Grid" @ref="Grid" AllowPaging="true" AllowSorting="true" DataSource="@GridData" AllowFiltering="true">
                            <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.FilterBar" Mode="FilterBarMode.OnEnter"></GridFilterSettings>
                            <GridEvents CommandClicked="OnCommandClicked" TValue="Product"></GridEvents>
                            <GridPageSettings PageSize="5"></GridPageSettings>


                            <GridColumns>
                                <GridColumn Field=@nameof(Product.id_producto) HeaderText="ID" Visible="false" TextAlign="TextAlign.Center" Width="10" IsPrimaryKey="true"></GridColumn>
                                <GridColumn Field=@nameof(Product.codigo) HeaderText="Código" Width="30" FilterSettings="@(new FilterSettings{ Operator = Operator.Contains })"></GridColumn>
                                <GridColumn Field=@nameof(Product.producto) HeaderText="Producto" Width="100" FilterSettings="@(new FilterSettings{ Operator = Operator.Contains })"></GridColumn>

                                <GridColumn HeaderText="Manage Records" Width="10">
                                    <GridCommandColumns>
                                        <GridCommandColumn Type="CommandButtonType.None" Title="Agregar" ButtonOption="@(new CommandButtonOptions() {IconCss="fas fa-plus-square", CssClass="eng"  })"></GridCommandColumn>
                                    </GridCommandColumns>
                                </GridColumn>
                            </GridColumns>
                        </SfGrid>
                    }
                </div>
            </div>
            <div class="row">
                <div class="col-12">
                    <h5><b>Items seleccionados</b></h5>
                </div>
            </div>
            <div class="row">
                <div class="col-12">
                    <SfGrid ID="Selected" @ref="SelectedGrid" AllowSorting="true" DataSource="@products">
                         <GridEditSettings AllowAdding="true"  AllowDeleting="true" ></GridEditSettings>
                        <GridColumns>
                            <GridColumn Field=@nameof(Product.id_producto) HeaderText="ID" Visible="false" TextAlign="TextAlign.Center" Width="10" IsPrimaryKey="true"></GridColumn>
                            <GridColumn Field=@nameof(Product.codigo) HeaderText="Código" Width="10"></GridColumn>
                            <GridColumn Field=@nameof(Product.producto) HeaderText="Producto" Width="30"></GridColumn>
                            <GridColumn HeaderText="Acciones" Width="100">
                                <GridCommandColumns>
                                    
                                    <GridCommandColumn Type="CommandButtonType.Delete" ButtonOption="@(new CommandButtonOptions() { IconCss = "e-icons e-delete", CssClass = "e-flat" })"></GridCommandColumn>
                                    
                                </GridCommandColumns>
                            </GridColumn>
                        </GridColumns>
                    </SfGrid>
                </div>
            </div>
        </div>

    </div>

</div>


@code {
    //public IEnumerable<Product> clients { get; set; }
    public string Message { get; set; }

    public string ErrorDetails = "";

    public IEnumerable<Product> GridData { get; set; }
    public List<Product> products = new List<Product>();


    public SfGrid<Product> Grid { get; set; }
    public SfGrid<Product> SelectedGrid { get; set; }


    protected override async Task OnInitializedAsync()
    {
        try
        {
            GridData = await ProductService.GetProductsDefinitions();
        }
        catch (Exception ex)
        {
            Message = "Error al obtener productos: " + ex.Message;
        }
    }


    public void OnCommandClicked(CommandClickEventArgs<Product> args)
    {
        var item = args.RowData;
        products.Add(item);
        SelectedGrid.Refresh();
    }



}


