@page "/Cliente"
@using Model
@using Interfaces

@inject IClientService ClientService
@inject INeighborhoodService NeighborhoodService
@inject INationalityService NationalityService
@inject IClientTypeService ClientTypeService
@inject ICivilStatusService CivilStatusService
@inject NavigationManager NavigationManager

@attribute [Authorize]

@using Syncfusion.Blazor
@using Syncfusion.Blazor.Data
@using Syncfusion.Blazor.Grids
@using System.Collections.ObjectModel
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Inputs;
@using Syncfusion.Blazor.Calendars;
@using Syncfusion.Blazor.Popups;
@using Syncfusion.Blazor.Notifications
@using Syncfusion.Blazor.Buttons




<div class="container-fluid">
    <p>@Message</p>
    <span class="error">@ErrorDetails</span>

    <div class="col-lg-12" style="padding:1px; height:50px">
        <div class="content-wrapper">
            <div class="alert alert-title" role="banner"><b>Clientes</b></div>
        </div>
    </div>


    <div class="col-lg-12 control-section">
        <div class="content-wrapper">
            <div class="row">
                @if (GridData == null)
                {
                    <div class="alert alert-warning" role="alert"><p><em>Cargando datos...</em></p></div>
                }
                else
                {
            <SfGrid ID="Grid" @ref="Grid" AllowPaging="true" AllowSorting="true" Toolbar="@ToolbarItems" DataSource="@GridData" Locale="es-ES" AllowFiltering="true" AllowExcelExport="true" ShowColumnChooser="true">

                <GridEvents OnActionBegin="OnBeginHandler" OnActionComplete="OnCompleteHandler" TValue="Client" OnToolbarClick="ToolbarClickHandler"></GridEvents>
                <GridPageSettings PageSize="20"></GridPageSettings>
                <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"></GridFilterSettings>
                <GridEditSettings AllowAdding="true" AllowEditing="true" AllowDeleting="true" Mode="EditMode.Dialog" Dialog="DialogParams">
                    <HeaderTemplate>
                        @{
                            var cli = (context as Client);
                        }
                        <span>Detalle de Cliente: @(cli.razon_social)</span>
                    </HeaderTemplate>
                    <Template>
                        @{
                            var cli = (context as Client);
                        }
                        <div>
                            <div class="form-row">
                                <div class="form-group col-md-3">

                                    <SfNumericTextBox @bind-Value="@(cli.id_funcionario)" Enabled="false" Placeholder="ID" FloatLabelType="FloatLabelType.Always"></SfNumericTextBox>
                                </div>
                                <div class="form-group col-md-6">

                                    <SfTextBox @bind-Value="@(cli.razon_social)" Enabled="true" Placeholder="Razón social" FloatLabelType="FloatLabelType.Always"> </SfTextBox>
                                </div>
                            </div>
                            <div class="form-row">
                                <div class="form-group col-md-6">

                                    <SfTextBox @bind-Value="@(cli.nombres)" Enabled="true" Placeholder="Nombres" FloatLabelType="FloatLabelType.Always"> </SfTextBox>
                                </div>
                                <div class="form-group col-md-6">

                                    <SfTextBox @bind-Value="@(cli.apellidos)" Enabled="true" Placeholder="Apellidos" FloatLabelType="FloatLabelType.Always"> </SfTextBox>
                                </div>
                            </div>
                            <div class="form-row">
                                <div class="form-group col-md-3">
                                    <SfTextBox @bind-Value="@(cli.ci)" Enabled="true" Placeholder="Nro. Documento" FloatLabelType="FloatLabelType.Always"> </SfTextBox>
                                </div>
                                <div class="form-group col-md-3">
                                    <SfTextBox @bind-Value="@(cli.ruc)" Enabled="true" Placeholder="R.U.C." FloatLabelType="FloatLabelType.Always"> </SfTextBox>
                                </div>
                                <div class="form-group col-md-6">
                                    <SfTextBox @bind-Value="@(cli.direccion)" Enabled="true" Placeholder="Dirección" FloatLabelType="FloatLabelType.Always"> </SfTextBox>
                                </div>
                            </div>
                            <div class="form-row">
                                <div class="form-group col-md-3">

                                    <SfDropDownList DataSource="@LocalSexo"
                                                    TItem="Sexo"
                                                    TValue="string"
                                                    @bind-Value="@(cli.sexo)"
                                                    Placeholder="Sexo"
                                                    FloatLabelType="FloatLabelType.Always">
                                        <DropDownListFieldSettings Value="ID" Text="Text"></DropDownListFieldSettings>
                                    </SfDropDownList>
                                </div>
                                <div class="form-group col-md-3">

                                    <SfDatePicker @bind-Value="@(cli.fecha_nacimiento)"
                                                  Placeholder="Fec. nacimiento"
                                                  FloatLabelType="FloatLabelType.Always"></SfDatePicker>
                                </div>
                                <div class="form-group col-md-3">

                                    <SfDropDownList DataSource="@nationalitys"
                                                    TItem="Nationality"
                                                    TValue="Int32?"
                                                    @bind-Value="@(cli.id_nacionalidad)"
                                                    Placeholder="Nacionalidad"
                                                    FloatLabelType="FloatLabelType.Always" AllowFiltering="true" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains">
                                        <DropDownListFieldSettings Text="nacionalidad" Value="id_nacionalidad"></DropDownListFieldSettings>
                                    </SfDropDownList>
                                </div>
                                <div class="form-group col-md-3">
                                    <SfDropDownList TValue="Int32?" TItem="ClientType" @bind-Value="@(cli.id_tipo_cliente)" Placeholder="Tipo cliente" FloatLabelType="FloatLabelType.Always" DataSource="@clientTypes">
                                        <DropDownListFieldSettings Text="tipo" Value="id_tipo_cliente"></DropDownListFieldSettings>
                                    </SfDropDownList>
                                </div>
                            </div>
                            <div class="form-row">
                                <div class="form-group col-md-3">
                                    <SfDropDownList TValue="Int32?" TItem="Neighborhood" @bind-Value="@(cli.id_barrio)" Placeholder="Barrio" DataSource="@neighborhoods" FloatLabelType="FloatLabelType.Always" AllowFiltering="true" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains">
                                        <DropDownListFieldSettings Text="barrio" Value="id_barrio"></DropDownListFieldSettings>
                                    </SfDropDownList>
                                </div>
                                <div class="form-group col-md-3">
                                    <SfDropDownList TValue="Int32?" TItem="CivilStatus" @bind-Value="@(cli.id_estado_civil)" Placeholder="Estado civil" DataSource="@civilStatus" FloatLabelType="FloatLabelType.Always">
                                        <DropDownListFieldSettings Text="estado_civil" Value="id_estado_civil"></DropDownListFieldSettings>
                                    </SfDropDownList>
                                </div>
                                <div class="form-group col-md-3">
                                    <SfDropDownList TValue="String" TItem="Exento" @bind-Value="@(cli.cliente_exento)" Placeholder="Exento" DataSource="@LocalExento" FloatLabelType="FloatLabelType.Always">
                                        <DropDownListFieldSettings Text="Text" Value="Text"></DropDownListFieldSettings>
                                    </SfDropDownList>
                                </div>
                            </div>
                        </div>
                    </Template>
                </GridEditSettings>
                <GridColumns>
                    <GridColumn Field=@nameof(Client.id_cliente) HeaderText="ID" TextAlign="TextAlign.Center" Width="5" IsPrimaryKey="true"></GridColumn>

                    <GridColumn Field=@nameof(Client.nombres) HeaderText="Nombres" Width="20"></GridColumn>
                    <GridColumn Field=@nameof(Client.apellidos) HeaderText="Apellidos" Width="20"></GridColumn>

                    <GridColumn Field=@nameof(Client.razon_social) HeaderText="Razón social" Width="30"></GridColumn>
                    <GridColumn Field=@nameof(Client.ci) HeaderText="Nro. doc." Width="10"></GridColumn>
                    <GridColumn Field=@nameof(Client.ruc) HeaderText="R.U.C." Width="15"></GridColumn>
                    <GridColumn Field=@nameof(Client.cliente_exento) HeaderText="Exento" Width="15"></GridColumn>
                    <GridColumn Field="@nameof(Client.telefono)" HeaderText="Telefono" Width="20"></GridColumn>
                    <GridColumn Field="@nameof(Client.vendedor)" HeaderText="Vendedor" Width="20"></GridColumn>

                </GridColumns>
            </SfGrid>
                }

            </div>
            <SfDialog Target="#target"
                      Width="300px"
                      Height="130px"
                      IsModal="true"
                      ShowCloseIcon="false"
                      @bind-Visible="DeleteRecordConfirmVisibility">
                <DialogTemplates>
                    <Header> Eliminar el registro? </Header>
                    <Content>
                        <div class="button-container">
                            <button type="submit"
                                    class="e-btn e-normal e-primary"
                                    @onclick="ConfirmDeleteYes">
                                Yes
                            </button>
                            <button type="submit"
                                    class="e-btn e-normal"
                                    @onclick="ConfirmDeleteNo">
                                No
                            </button>
                        </div>
                    </Content>
                </DialogTemplates>
            </SfDialog>
            <SfToast @ref="ToastObj" Title="@ToastTitle" Content="@ToastContent" CssClass="@ToastCssClass">
                <ToastPosition X="Right" Y="Bottom"></ToastPosition>
            </SfToast>
           

        </div>

    </div>

</div>

<style>
    #toast_default .e-meeting::before {
        content: "\e705";
        font-size: 17px;
    }
</style>

@code {
    //public IEnumerable<Client> clients { get; set; }
    public string Message { get; set; }
    public string[] ToolbarItems = new string[] { "Add", "Edit", "Delete", "Update", "Cancel", "ExcelExport", "Search" };
    public string ErrorDetails = "";

    public IEnumerable<Client> GridData { get; set; }
    public IEnumerable<Neighborhood> neighborhoods { get; set; }
    public IEnumerable<Nationality> nationalitys { get; set; }
    public IEnumerable<ClientType> clientTypes { get; set; }
    public IEnumerable<CivilStatus> civilStatus { get; set; }

    public bool EditDialogVisibility { get; set; } = false;
    public bool DeleteRecordConfirmVisibility { get; set; } = false;

    public Int32 ID = 0;


    SfToast ToastObj;

    private int ToastFlag = 0;
    private string ToastTitle = "";
    private string ToastContent = "";
    private string ToastCssClass = "";

    private class ToastOption
    {
        public string Title { get; set; }
        public string Content { get; set; }
        public string CssClass { get; set; }
    }

    private ToastOption[] Toasts = new ToastOption[] {
        new ToastOption { Title = "Warning !", Content = "There was a problem with your network connection.", CssClass = "e-toast-warning" },
        new ToastOption { Title = "Success !", Content = "Your message has been sent successfully.", CssClass = "e-toast-success" },
        new ToastOption { Title = "Error !", Content = "A problem has been occurred while submitting your data.", CssClass = "e-toast-danger" },
        new ToastOption { Title = "Information !", Content = "Please read the comments carefully.", CssClass = "e-toast-info" }
    };



    SfGrid<Client> Grid { get; set; }

    private DialogSettings DialogParams = new DialogSettings { Width = "850px", EnableResize = true, AllowDragging = true };

    public class Sexo
    {
        public string ID { get; set; }
        public string Text { get; set; }
    }

    List<Sexo> LocalSexo = new List<Sexo> {
    new Sexo() { ID= "M", Text= "Masculino" },
    new Sexo() { ID= "F", Text= "Femenino" },
  };

    public class Exento
    {
        public string Text { get; set; }
    }

    List<Exento> LocalExento = new List<Exento>
    {
        new Exento() { Text = "SI"},
        new Exento() { Text = "NO"},
    };

    public IEditorSettings CivilStatusEditParams = new DropDownEditCellParams
    {
        Params = new DropDownListModel<object, object>() { AllowFiltering = true, ShowClearButton = true }
    };


    protected override async Task OnInitializedAsync()
    {
        try
        {
            GridData = await ClientService.GetAllClients();
            neighborhoods = await NeighborhoodService.GetAllNeighborhoods();
            nationalitys = await NationalityService.GetAllNationalitys();
            clientTypes = await ClientTypeService.GetAllClientTypes();
            civilStatus = await CivilStatusService.GetAllCivilStatus();
        }
        catch (Exception ex)
        {
            Message = "Error al obtener clientes: " + ex.Message;
        }
    }



    private async Task OnBeginHandler(ActionEventArgs<Client> Args)
    {
        if (Args.RequestType == Syncfusion.Blazor.Grids.Action.Save)
        {
            await SaveClient((Client)Args.Data);

        }
        else if (Args.RequestType == Syncfusion.Blazor.Grids.Action.Delete)
        {
            ID = ((Client)Args.Data).id_cliente;

            // Open Delete confirmation dialog
            this.DeleteRecordConfirmVisibility = true;
            StateHasChanged();
        }

        return;
    }

    private async Task OnCompleteHandler(ActionEventArgs<Client> Args)
    {
        if (Args.RequestType == Syncfusion.Blazor.Grids.Action.Save)
        {
            this.ToastTitle = "Completado!";
            this.ToastContent = "Se ha creado el cliente.";
            this.ToastCssClass = "e-toast-success";

            await ShowToast();
        }
        else if (Args.RequestType == Syncfusion.Blazor.Grids.Action.Delete)
        {

            StateHasChanged();
        }

        return;
    }

    protected async Task SaveClient(Client client)
    {
        await ClientService.SaveCient(client);
        Grid.Refresh();
        //ReloadPage();
    }

    protected async Task DeleteClient(int id)
    {
        await ClientService.DeleteClient(id);
        Grid.Refresh();
        //ReloadPage();
    }

    protected void ReloadPage()
    {
        NavigationManager.NavigateTo("/Cliente", true);
    }

    public async void ConfirmDeleteYes()
    {
        // The user selected Yes to delete the
        // seleted Help Desk Ticket
        // Delete the record
        await DeleteClient(ID);

        // Close the dialog
        this.DeleteRecordConfirmVisibility = false;

        // Refresh the SfGrid
        // so the deleted record will not show
        Grid.Refresh();
    }

    public void ConfirmDeleteNo()
    {
        // Open the dialog
        // to give the user a chance
        // to confim they want to delete the record
        this.DeleteRecordConfirmVisibility = false;
    }

    private async Task ShowToast()
    {
        await this.ToastObj.Show();
    }

    private async Task HideToast()
    {

        await this.ToastObj.Hide("All");
    }

    public async Task ToolbarClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (args.Item.Id == "Grid_excelexport") //Id is combination of Grid's ID and itemname
        {
            ExcelExportProperties ExcelProperties = new ExcelExportProperties();
            ExcelProperties.FileName = "Clientes.xlsx";
            await this.Grid.ExcelExport(ExcelProperties);
        }

    }
}


