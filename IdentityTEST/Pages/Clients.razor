@page "/Cliente"
@using Model
@using Interfaces
@inject IClientService ClientService
@inject INeighborhoodService NeighborhoodService
@inject INationalityService NationalityService 
@inject IClientTypeService ClientTypeService 
@attribute [Authorize]
@using Syncfusion.Blazor
@using Syncfusion.Blazor.Data
@using Syncfusion.Blazor.Grids
@using System.Collections.ObjectModel
@inject NavigationManager NavigationManager
@using Syncfusion.Blazor.DropDowns




<div class="container-fluid">
    <div class="col-lg-12 control-section">
        <div class="content-wrapper">
            <div class="row">
                <div class="col-10">
                    <div class="alert alert-heading" style="width:100%" role="banner"><h3>Clientes</h3></div>
                </div>
                
            </div>
        </div>
    </div>


    <p>@Messsage</p>
    <span class="error">@ErrorDetails</span>


    <div class="col-lg-12 control-section">
        <div class="content-wrapper">
            <div class="row">
                @if (GridData == null)
                {
                    <div class="alert alert-warning" role="alert"><p><em>Cargando datos...</em></p></div>
                }
                else
                {
                    <SfGrid ID="Grid" @ref="Grid" AllowPaging="true" AllowSorting="true" Toolbar="@ToolbarItems" AllowFiltering="true" DataSource="@GridData">

                        <GridEvents OnActionBegin="OnBeginHandler" TValue="Client"></GridEvents>
                        <GridPageSettings PageSize="20"></GridPageSettings>

                        <GridEditSettings AllowAdding="true" AllowEditing="true" AllowDeleting="true" Mode="EditMode.Dialog"></GridEditSettings>
                        <GridColumns>
                            <GridColumn Field=@nameof(Client.id_cliente) HeaderText="ID" TextAlign="TextAlign.Center" Width="5" IsPrimaryKey="true"></GridColumn>

                            <GridColumn Field=@nameof(Client.nombres) HeaderText="Nombres" Width="20"></GridColumn>
                            <GridColumn Field=@nameof(Client.apellidos) HeaderText="Apellidos" Width="20"></GridColumn>

                            <GridColumn Field=@nameof(Client.razon_social) HeaderText="Razón social" Width="30"></GridColumn>
                            <GridColumn Field=@nameof(Client.ci) HeaderText="Nro. doc." Width="10"></GridColumn>
                            <GridColumn Field=@nameof(Client.email) HeaderText="Email" Width="10"></GridColumn>
                            <GridColumn Field="@nameof(Client.nacionalidad)" HeaderText="Nacionalidad" EditType="EditType.DropDownEdit" Width="30">
                                <EditTemplate>
                                    <SfDropDownList TValue="Int32" TItem="Nationality" @bind-Value="@((context as Client).id_nacionalidad)" Placeholder="Selecccion Nacionalidad" DataSource="@nationalitys">
                                        <DropDownListFieldSettings Text="nacionalidad" Value="id_nacionalidad"></DropDownListFieldSettings>
                                    </SfDropDownList>
                                </EditTemplate>
                            </GridColumn>
                            <GridColumn Field=@nameof(Client.barrio) HeaderText="Barrio" EditType="EditType.DropDownEdit" Width="30">
                                <EditTemplate>
                                    <SfDropDownList TValue="Int32" TItem="Neighborhood" @bind-Value="@((context as Client).id_barrio)" Placeholder="Selecccione Barrio" DataSource="@neighborhoods">
                                        <DropDownListFieldSettings Text="barrio" Value="id_barrio"></DropDownListFieldSettings>
                                    </SfDropDownList>
                                </EditTemplate>
                            </GridColumn>

                            <GridColumn Field="@nameof(Client.tipo)" HeaderText="Tipo" EditType="EditType.DropDownEdit" Width="30">
                                <EditTemplate>
                                    <SfDropDownList TValue="Int32" TItem="ClientType" @bind-Value="@((context as Client).id_tipo_cliente)" Placeholder="Selecccione Tipo" DataSource="@clientTypes">
                                        <DropDownListFieldSettings Text="tipo" Value="id_tipo_cliente"></DropDownListFieldSettings>
                                    </SfDropDownList>
                                </EditTemplate>
                            </GridColumn>

                        </GridColumns>
                    </SfGrid>
                }

            </div>
        </div>

    </div>

</div>


@code {
    //public IEnumerable<Client> clients { get; set; }
    public string Messsage { get; set; }
    public string[] ToolbarItems = new string[] { "Add", "Edit", "Delete", "Update", "Cancel" };
    public string ErrorDetails = "";

    public IEnumerable<Client> GridData { get; set; }
    public IEnumerable<Neighborhood> neighborhoods { get; set; }
    public IEnumerable<Nationality> nationalitys { get; set; }
    public IEnumerable<ClientType> clientTypes { get; set; }



    SfGrid<Client> Grid { get; set; }

    protected  override async Task OnInitializedAsync()
    {
        try
        {
            GridData = await ClientService.GetAllClients();
            neighborhoods = await NeighborhoodService.GetAllNeighborhoods();
            nationalitys = await NationalityService.GetAllNationalitys();
            clientTypes = await ClientTypeService.GetAllClientTypes();
        }
        catch (Exception ex)
        {
            Messsage = "Error al obtener clientes: " + ex.Message;
        }
    }



    private async Task OnBeginHandler(ActionEventArgs<Client> Args)
    {
        if (Args.RequestType == Syncfusion.Blazor.Grids.Action.Save)
        {
            await SaveClient((Client)Args.Data);
        }
        else if (Args.RequestType == Syncfusion.Blazor.Grids.Action.Delete)
        {
            await DeleteClient(((Client)Args.Data).id_cliente);
        }

        return;
    }

    protected async Task SaveClient(Client client)
    {
        await ClientService.SaveCient(client);
        Grid.Refresh();
    }

    protected async Task DeleteClient(int id)
    {
        await ClientService.DeleteClient(id);
        Grid.Refresh();
    }
}


